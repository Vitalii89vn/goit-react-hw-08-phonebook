{"version":3,"file":"static/js/494.ba8bf3ef.chunk.js","mappings":"sMACA,EAA4B,+BAA5B,EAAiE,yB,2BCDpDA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,E,kBCOtBC,EAAc,WACvB,IAAMC,GAAWC,EAAAA,EAAAA,MACXJ,GAAWK,EAAAA,EAAAA,IAAYP,GACzBQ,GAASC,EAAAA,EAAAA,MACTC,GAAWD,EAAAA,EAAAA,MAqBf,OAAQ,gBAAKE,UAAWC,EAAhB,UACJ,kBAAMC,SApBW,SAAAC,GACjBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,OACTC,EAAOF,EAAKG,SAASD,KAAKE,MAEhClB,EAASmB,MAAK,SAAAC,GAAI,OAAIA,EAAKJ,KAAKK,gBAAkBL,EAAKK,aAArC,IAEdC,IAAAA,OAAAA,QAAA,UAA2BN,EAA3B,4BAEAb,GAASoB,EAAAA,EAAAA,IAAW,CAChBP,KAAMF,EAAKG,SAASD,KAAKE,MACzBM,OAAQV,EAAKG,SAASO,OAAON,SAIpBlB,EAASmB,MAAK,SAAAC,GAAI,OAAIA,EAAKJ,KAAKK,gBAAkBL,EAAKK,aAArC,KACpBP,EAAKW,OACvB,EAGG,WACI,kBAAOC,QAASpB,EAAhB,mBACA,kBACIqB,KAAK,OACLC,GAAItB,EACJU,KAAK,OACLa,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,KAGZ,kBAAOL,QAASlB,EAAhB,qBACA,kBACImB,KAAK,MACLC,GAAIpB,EACJQ,KAAK,SACLa,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,KAGZ,mBAAQJ,KAAK,SAASlB,UAAWC,EAAjC,6BAIX,E,SCtDYsB,EAAS,WAClB,IAAM7B,GAAWC,EAAAA,EAAAA,MAKjB,OACI,4BAAK,kBAAOsB,QAAQ,SAAf,oCACD,kBAAOC,KAAK,OAAOX,KAAK,SAASiB,SANvB,SAACrB,GACfT,GAAS+B,EAAAA,EAAAA,IAAatB,EAAEG,OAAOG,OAClC,MAOJ,ECTYiB,EAAkB,SAAC,GAAyB,IAAvBP,EAAsB,EAAtBA,GAAIZ,EAAkB,EAAlBA,KAAMoB,EAAY,EAAZA,MAClCjC,GAAWC,EAAAA,EAAAA,MAGjB,OACI,0BAAKY,EAAL,KAAaoB,GACT,mBAAQT,KAAK,SAASU,QAJT,kBAAMlC,GAASmC,EAAAA,EAAAA,IAAcV,GAA7B,EAIb,sBAGX,ECVYW,EAAc,WACvB,IAAMvC,GAAWK,EAAAA,EAAAA,IAAYP,GAGvB0C,GAFSnC,EAAAA,EAAAA,IAAYoC,EAAAA,IAEKpB,cAC1BqB,EAAkB1C,EAAS2C,QAC7B,SAAAC,GAAO,OAAIA,EAAQ5B,KAAKK,cAAcwB,SAASL,EAAxC,IAEX,OACI,wBACKE,EAAgBI,OAAS,GAAKJ,EAAgBK,KAAI,gBAAGnB,EAAH,EAAGA,GAAIZ,EAAP,EAAOA,KAAMQ,EAAb,EAAaA,OAAb,OAC/C,SAACW,EAAD,CAEIP,GAAIA,EACJZ,KAAMA,EACNoB,MAAOZ,GAHFI,EAFsC,KAU9D,ECTD,EAZqB,WAEjB,OACI,iCACI,uCACA,SAAC1B,EAAD,KACA,sCACA,SAAC8B,EAAD,KACA,SAACO,EAAD,MAGX,C","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.jsx","pages/ContactsPage.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ContactForm_container__qpJ1N\",\"btn\":\"ContactForm_btn__wll+u\"};","export const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;","import { nanoid } from 'nanoid'\nimport css from \"./ContactForm.module.css\"\nimport Notiflix from 'notiflix';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\n\nexport const ContactForm = () => {\n    const dispatch = useDispatch();\n    const contacts = useSelector(selectContacts);\n    let nameId = nanoid();\n    let numberId = nanoid();\n\n    const handleSubmit = e => {\n        e.preventDefault();\n        const form = e.target;\n        const name = form.elements.name.value;\n        // const number = form.elements.phone.value;\n        contacts.find(item => item.name.toLowerCase() === name.toLowerCase())\n            ?\n            Notiflix.Notify.failure(`${name} is already in contacts`)\n            :\n            dispatch(addContact({\n                name: form.elements.name.value,\n                number: form.elements.number.value\n            }\n            ));\n      \n        const findName = contacts.find(item => item.name.toLowerCase() === name.toLowerCase());\n        if (!findName) form.reset();\n    };\n\n    return (<div className={css.container}>\n        <form onSubmit={handleSubmit}>\n            <label htmlFor={nameId}>Name</label>\n            <input\n                type=\"text\"\n                id={nameId}\n                name=\"name\"\n                pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required\n\n            />\n            <label htmlFor={numberId}>Number</label>\n            <input\n                type=\"tel\"\n                id={numberId}\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n\n            />\n            <button type=\"submit\" className={css.btn}>Add contact</button>\n        </form>\n    </div>\n    )\n}\n","import \"./Filter.module.css\"\nimport { useDispatch } from \"react-redux\";\nimport {updateFilter} from 'redux/filter/filterSlice'\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const setFilter = (e) => {\n        dispatch(updateFilter(e.target.value))\n    };\n  \n    return (\n        <div><label htmlFor=\"filter\">Find contacts by name</label>\n            <input type=\"text\" name=\"filter\" onChange={setFilter} />\n        </div>\n    )\n}\n","import PropTypes from 'prop-types';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { useDispatch } from \"react-redux\";\n\n\n\nexport const ContactListItem = ({ id, name, phone }) => {\n    const dispatch = useDispatch();\n    const handleDelete = () => dispatch(deleteContact(id));\n\n    return (\n        <li>{name}: {phone}\n            <button type=\"button\" onClick={handleDelete}>Delete</button>\n        </li>\n    )\n};\n\nContactListItem.propTypes = {\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    phone: PropTypes.string.isRequired,\n};","import { ContactListItem } from 'components/ContactListItem/ContactListItem';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { selectFilter } from 'redux/filter/filterSlice';\n\nexport const ContactList = () => {\n    const contacts = useSelector(selectContacts);\n    const filter = useSelector(selectFilter);\n    \n    const normalizedFilter = filter.toLowerCase();\n    const visibleContacts = contacts.filter(\n        contact => contact.name.toLowerCase().includes(normalizedFilter));\n\n    return (\n        <ul>\n            {visibleContacts.length > 0 && visibleContacts.map(({ id, name, number }) => (\n                <ContactListItem\n                    key={id}\n                    id={id}\n                    name={name}\n                    phone={number}\n                />\n            ))}\n        </ul>\n    )\n};\n","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { Filter } from \"components/Filter/Filter\";\nimport { ContactList } from \"components/ContactList/ContactList\";\n\nconst ContactsPage = () => {\n        \n    return (\n        <>\n            <h1>Phonebook</h1>\n            <ContactForm />\n            <h2>Contacts</h2>\n            <Filter />\n            <ContactList />\n        </>\n    )\n};\nexport default ContactsPage;"],"names":["selectContacts","state","contacts","items","ContactForm","dispatch","useDispatch","useSelector","nameId","nanoid","numberId","className","css","onSubmit","e","preventDefault","form","target","name","elements","value","find","item","toLowerCase","Notiflix","addContact","number","reset","htmlFor","type","id","pattern","title","required","Filter","onChange","updateFilter","ContactListItem","phone","onClick","deleteContact","ContactList","normalizedFilter","selectFilter","visibleContacts","filter","contact","includes","length","map"],"sourceRoot":""}